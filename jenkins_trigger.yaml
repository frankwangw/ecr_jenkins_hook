AWSTemplateFormatVersion: 2010-09-09
Description: ---this is stack setup ecr update trigge jenkins job

Parameters: 
   RepoName:
     Description: Repo Name not full path
     Type: String
   
   JenkinsHostUrl:
     Description: this your jenkins host Url + port http://xxx:8080
     Type: String
   
   JenkinsJobName:
     Description: the jenknis job you want hook up 
     Type: String

   LambdaSG:
     Description: SG attach Lambda
     Type: String

   LambdaSubnet:
     Description: the subnet which lambda running
     Type: List<AWS::EC2::Subnet::Id>

   LambdaLay:
    Description: lambda Layer name 
    Type: String
    Default: arn:aws:lambda:ap-southeast-2:028815121700:layer:jenkins:3

   jenkinsusername:
      Description: username of jenkins
      Type: String
      NoEcho: true
      Default: admin

   jenkinspassword:
      Description: password of jenkins
      Type: String
      NoEcho: true
      Default: myyellow
   
    

Resources: 
   EcrEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Ecr Repo update Notification 
      EventPattern:
        source:
          - aws.ecr 
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ecr.amazonaws.com 
          eventName:
            - PutImage
      State: ENABLED
      Name: !Sub
        - ${job}-hook
        - {job : !Ref JenkinsJobName}
      Targets:
       -
        Arn: !GetAtt TrggerJenkins.Arn
        Id: !Ref TrggerJenkins
   
   EcrEventPermission:
     DependsOn: TrggerJenkins
     Type: AWS::Lambda::Permission
     Properties:
       Action: lambda:InvokeFunction
       FunctionName: !Ref TrggerJenkins
       Principal: events.amazonaws.com
       SourceArn: !GetAtt EcrEvent.Arn

   TrggerJenkins:
     Type: AWS::Lambda::Function
     Properties:
       Description: This function is using to hook with ecr update and jenkins job
       Handler: index.lambda_handler
       MemorySize: 128
       Role: !GetAtt lambdarole.Arn
       Runtime: python3.6
       Layers:
         - !Ref LambdaLay
       VpcConfig:
         SecurityGroupIds:
           - !Ref LambdaSG
         SubnetIds:
           - !Select [0,!Ref LambdaSubnet]
           - !Select [1,!Ref LambdaSubnet]
    
       Code:
         ZipFile: !Sub |
            import jenkins
            import json
            def lambda_handler(event, context):
             repoarn = event["detail"]["resources"][0]["ARN"]
             print(repoarn)
              if ${RepoName} in str(repoarn):
                # action code here you can add more here
                  server = jenkins.Jenkins('${JenkinsHostUrl}', username='${jenkinsusername}', password='${jenkinspassword}')
                  server.build_job('${JenkinsJobName}')
              else:
                 print ("not match repo")

   lambdarole:
     Type: AWS::IAM::Role
     Properties:
       Path: /
       AssumeRolePolicyDocument: 
         Version: "2012-10-17"
         Statement:
           - 
              Effect: Allow
              Principal: 
                Service:
                   - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
       Policies:
         - 
          PolicyName: !Sub '${AWS::StackName}-lambdarole'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
               - 
                 Effect: "Allow"
                 Action: 
                    - "cloudwatch:PutMetricData"
                 Resource: "*"

               - 
                 Effect: "Allow"
                 Action:
                    - "ec2:DescribeRegions"
                    - "ec2:DescribeVpnConnections"
                 Resource:  "*"

               - 
                 Effect: "Allow"
                 Action: 
                    - "logs:CreateLogGroup"
                 Resource: "*"

               - 
                 Effect: "Allow"
                 Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                 Resource:  "*"  

               - 
                 Effect: "Allow"
                 Action: 
                    - "ec2:CreateNetworkInterface"
                    - "ec2:DeleteNetworkInterface"
                    - "ec2:DescribeNetworkInterfaces"
                 Resource: "*"
   


 